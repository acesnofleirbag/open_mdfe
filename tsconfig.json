{
    "compilerOptions": {
        // Enable importing files with any extension, provided a declaration file is present.
        // "allowArbitraryExtensions": true,

        // Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and
        // either '--noEmit' or '--emitDeclarationOnly' to be set.
        // "allowImportingTsExtensions": true,

        // Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files.
        // "allowJs": true,

        // Allow 'import x from y' when a module doesn't have a default export.
        // "allowSyntheticDefaultImports": true,

        // Allow accessing UMD globals from modules.
        // "allowUmdGlobalAccess": true,

        // Disable error reporting for unreachable code.
        // "allowUnreachableCode": true,

        // Disable error reporting for unused labels.
        // "allowUnusedLabels": true,

        // Ensure 'use strict' is always emitted.
        "alwaysStrict": true,

        // Specify the base directory to resolve non-relative module names.
        // "baseUrl": "./",

        // Enable error reporting in type-checked JavaScript files.
        // "checkJs": true,

        // Enable constraints that allow a TypeScript project to be used with project references.
        // "composite": true,

        // Conditions to set in addition to the resolver-specific defaults when resolving imports.
        // "customConditions": [],

        // Generate .d.ts files from TypeScript and JavaScript files in your project.
        "declaration": true,

        // Specify the output directory for generated declaration files.
        // "declarationDir": "./",

        // Create sourcemaps for d.ts files.
        "declarationMap": true,

        // Reduce the number of projects loaded automatically by TypeScript.
        // "disableReferencedProjectLoad": true,

        // Opt a project out of multi-project reference checking when editing.
        // "disableSolutionSearching": true,

        // Disable preferring source files instead of declaration files when referencing composite projects.
        // "disableSourceOfProjectReferenceRedirect": true,

        // Emit more compliant, but verbose and less performant JavaScript for iteration.
        // "downlevelIteration": true,

        // Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.
        // "emitBOM": true,

        // Only output d.ts files and not JavaScript files.
        // "emitDeclarationOnly": true,

        // Emit design-type metadata for decorated declarations in source files.
        // "emitDecoratorMetadata": true,

        // Emit additional JavaScript to ease support for importing CommonJS modules.
        // This enables 'allowSyntheticDefaultImports' for type compatibility.
        // "esModuleInterop": true,

        // Interpret optional property types as written, rather than adding 'undefined'.
        // "exactOptionalPropertyTypes": true,

        // Enable experimental support for legacy experimental decorators.
        // "experimentalDecorators": true,

        // Ensure that casing is correct in imports.
        "forceConsistentCasingInFileNames": true,

        // Allow importing helper functions from tslib once per project, instead of including them per-file.
        // "importHelpers": true,

        // Specify emit/checking behavior for imports that are only used for types.
        // "importsNotUsedAsValues": "remove",

        // Save .tsbuildinfo files to allow for incremental compilation of projects.
        // "incremental": true,

        // Include sourcemap files inside the emitted JavaScript.
        // "inlineSourceMap": true,

        // Include source code in the sourcemaps inside the emitted JavaScript.
        // "inlineSources": true,

        // Ensure that each file can be safely transpiled without relying on other imports.
        "isolatedModules": true,

        // Specify what JSX code is generated.
        // "jsx": "preserve",

        // Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'.
        // "jsxFactory": "",

        // Specify the JSX Fragment reference used for fragments when targeting React JSX emit.
        // e.g. 'React.Fragment' or 'Fragment'.
        // "jsxFragmentFactory": "",

        // Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'.
        // "jsxImportSource": "",

        // Specify a set of bundled library declaration files that describe the target runtime environment.
        // "lib": [],

        // Specify the location where debugger should locate map files instead of generated locations.
        // "mapRoot": "",

        // Specify the maximum folder depth used for checking JavaScript files from 'node_modules'.
        // Only applicable with 'allowJs'.
        // "maxNodeModuleJsDepth": 1,

        // Specify what module code is generated.
        "module": "commonjs",

        // Control what method is used to detect module-format JS files.
        // "moduleDetection": "auto",

        // Specify how TypeScript looks up a file from a given module specifier.
        // "moduleResolution": "node10",

        // List of file name suffixes to search when resolving a module.
        // "moduleSuffixes": [],

        // Set the newline character for emitting files.
        // "newLine": "crlf",

        // Disable emitting files from a compilation.
        // "noEmit": true,

        // Disable generating custom helper functions like '__extends' in compiled output.
        // "noEmitHelpers": true,

        // Disable emitting files if any type checking errors are reported.
        "noEmitOnError": true,

        // Enable error reporting for fallthrough cases in switch statements.
        "noFallthroughCasesInSwitch": true,

        // Enable error reporting for expressions and declarations with an implied 'any' type.
        "noImplicitAny": true,

        // Ensure overriding members in derived classes are marked with an override modifier.
        // "noImplicitOverride": true,

        // Enable error reporting for codepaths that do not explicitly return in a function.
        // "noImplicitReturns": true,

        // Enable error reporting when 'this' is given the type 'any'.
        // "noImplicitThis": true,

        // Disable including any library files, including the default lib.d.ts.
        // "noLib": true,

        // Enforces using indexed accessors for keys declared using an indexed type.
        // "noPropertyAccessFromIndexSignature": true,

        // Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript
        // should add to a project.
        // "noResolve": true,

        // Add 'undefined' to a type when accessed using an index.
        // "noUncheckedIndexedAccess": true,

        // Enable error reporting when local variables aren't read.
        "noUnusedLocals": true,

        // Raise an error when a function parameter isn't read.
        "noUnusedParameters": true,

        // Specify an output folder for all emitted files.
        "outDir": "./dist",

        // Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true,
        // also designates a file that bundles all .d.ts output.
        // "outFile": "./",

        // Specify a set of entries that re-map imports to additional lookup locations.
        // "paths": {},

        // Disable erasing 'const enum' declarations in generated code.
        // "preserveConstEnums": true,

        // Disable resolving symlinks to their realpath. This correlates to the same flag in node.
        // "preserveSymlinks": true,

        // Preserve unused imported values in the JavaScript output that would otherwise be removed.
        // "preserveValueImports": true,

        // Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit.
        // "reactNamespace": "",

        // Disable emitting comments.
        "removeComments": true,

        // Enable importing .json files.
        "resolveJsonModule": true,

        // Use the package.json 'exports' field when resolving package imports.
        // "resolvePackageJsonExports": true,

        // Use the package.json 'imports' field when resolving imports.
        // "resolvePackageJsonImports": true,

        // Specify the root folder within your source files.
        // "rootDir": "./",

        // Allow multiple folders to be treated as one when resolving modules.
        // "rootDirs": [],

        // Skip type checking .d.ts files that are included with TypeScript.
        // "skipDefaultLibCheck": true,

        // Skip type checking all .d.ts files.
        "skipLibCheck": true,

        // Create source map files for emitted JavaScript files.
        "sourceMap": true,

        // Specify the root path for debuggers to find the reference source code.
        // "sourceRoot": "",

        // Enable all strict type-checking options.
        "strict": true,

        // Check that the arguments for 'bind', 'call', and 'apply' methods match the original function.
        // "strictBindCallApply": true,

        // When assigning functions, check to ensure parameters and the return values are subtype-compatible.
        // "strictFunctionTypes": true,

        // When type checking, take into account 'null' and 'undefined'.
        // "strictNullChecks": true,

        // Check for class properties that are declared but not set in the constructor.
        // "strictPropertyInitialization": true,

        // Disable emitting declarations that have '@internal' in their JSDoc comments.
        // "stripInternal": true,

        // Set the JavaScript language version for emitted JavaScript and include compatible library declarations.
        "target": "es2022",

        // Specify the path to .tsbuildinfo incremental compilation file.
        // "tsBuildInfoFile": "./.tsbuildinfo",

        // Specify multiple folders that act like './node_modules/@types'.
        // "typeRoots": [],

        // Specify type package names to be included without being referenced in a source file.
        // "types": [],

        // Emit ECMAScript-standard-compliant class fields.
        // "useDefineForClassFields": true,

        // Default catch clause variables as 'unknown' instead of 'any'.
        // "useUnknownInCatchVariables": true,

        // Do not transform or elide any imports or exports not marked as type-only, ensuring they are written
        // in the output file's format based on the 'module' setting.
        // "verbatimModuleSyntax": true,
    },
    "include": ["lib"],
    "exclude": ["node_modules", "tests", "dist"],
}
